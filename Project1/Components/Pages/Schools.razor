@page "/schools"
@using Newtonsoft.Json.Linq
@using Project1.Logic
@using VDS.RDF
@using VDS.RDF.Query
@attribute [StreamRendering]

<PageTitle>Довідник з шкiл світу</PageTitle>

<h1>Довідник з шкiл світу</h1>

@if (!isReady) {
    <p><em>Завантаження...</em></p>
}
else
{
    <div class="filters">
        <label for="nameFilter">Фільтр за назвою:</label>
        <input id="nameFilter" @bind="nameFilter" @bind:event="oninput" placeholder="Введіть назву..." />

        <label for="typeFilter">Фільтр за типом:</label>
        <input id="typeFilter" @bind="typeFilter" @bind:event="oninput" placeholder="Введіть тип..." />

        <label for="countryFilter">Фільтр за країною:</label>
        <input id="countryFilter" @bind="countryFilter" @bind:event="oninput" placeholder="Введіть країну..." />


        <label for="studentsFilter">Фільтр за кількістю студентів:</label>
        <input id="studentsFilter" type="number" @bind="studentsFilter" @bind:event="oninput" placeholder="Кількість студентів..." />

        <button @onclick="ApplyFilter">Застосувати</button>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Назва</th>
                <th>Тип</th>
                <th>Країна</th>

                <th>Кількість студентів</th>
                <th>Дiя</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var result in results["results"]["bindings"]) {
                <tr>
                    <td>@result["Id"]?["value"]</td>
                    <td>@result["NameClean"]?["value"]</td>
                    <td>@result["Type"]?["value"]</td>
                    <td>@result["Country"]?["value"]</td>
                    <td>@result["NumberOfStudents"]?["value"]</td>
                    <td>
                        <button class="btn btn-primary" @onclick='() => DetailsUA(result["Id"]?["value"].ToString())'>Деталi</button>
                     </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="pagination-controls">
        <button @onclick="PrevPage">Попередня</button>
        <span>Сторінка: @curPage</span>
        <button @onclick="NextPage">Наступна</button>
    </div>
}
<!-- Popup -->
@if (isPopupVisible) {
    <div class="modal-backdrop"></div>
    <div class="modal show d-block">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Details</h5>
                    <button type="button" class="btn-close" @onclick="ClosePopup"></button>
                </div>
                <div class="modal-body">
                    @if (selectedItem != null) {
                        <p><strong>Name:</strong> @selectedItem["NameClean"]?["value"]</p>
                        <p><strong>City:</strong> @selectedItem["City"]?["value"]</p>
                        <p><strong>Type:</strong> @selectedItem["Type"]?["value"]</p>
                        <p><strong>Country:</strong> @selectedItem["Country"]?["value"]</p>
                        <p><strong>Students:</strong> @selectedItem["NumberOfStudents"]?["value"]</p>
                        <p><strong>Abstract:</strong> @selectedItem["Abstract"]?["value"]</p>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ClosePopup">Close</button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    private JObject results = new();
    private bool isReady = false;
    private uint curPage = 0;
    private string nameFilter = "";
    private string typeFilter = "";
    private string countryFilter = "";
    private int establishedFilter = 0;
    private int studentsFilter = 0;
    private bool isPopupVisible = false;
    private JToken selectedItem;

    protected override async Task OnInitializedAsync(){
        await LoadPage();
    }
    private async Task LoadPage() {
        isReady = false;
        results = await DbPediaRepository.GetList(InstitutionType.School, nameFilter, typeFilter, countryFilter, establishedFilter, studentsFilter, curPage, SortBy.StudentCount, true);
        isReady = true;
    }
    private async Task NextPage() {
        curPage++;
        await LoadPage();
    }
    private async Task PrevPage() {
        if (curPage>0) curPage--;
        await LoadPage();
    }
    private async Task ApplyFilter() {
        curPage = 0;
        await LoadPage();
    }
    private async Task DetailsUA(string id) {
        await Details(id, Lang.Ua);
    }
    private async Task DetailsEn(string id) {
        await Details(id, Lang.En);
    }
    private async Task Details(string id, Lang lang) {
        selectedItem = (await DbPediaRepository.GetEntity(id, lang))["results"]["bindings"].First();
        isPopupVisible = true;
    }
    private void ClosePopup() {
        isPopupVisible = false;
        selectedItem = null;
    }
}
